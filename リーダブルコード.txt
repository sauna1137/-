リーダブルコード

第一部

読みやすいコードとは
他の人が最短時間で理解できるようなコード
短くて理解に時間がかかるコードよりも長くても理解するまでにかかる時間が短いコードを


名前に情報を詰め込む
明確な単語を使用、汎用的な名前を避ける、具体的な名前を使用する
類語を調べてみる

GetではなくFetchやDownloadなど

ループイテレータ
i , j , kなど


値の単位や属性を追加する
delay -> delay_secs
limit -> max_range
password -> plainText_password
html -> html_utf8


名前の長さ
スコープが小さければ短い名前でも判断できる
省略形はString を　Strなら誰でもわかるがBackEndManagerをBEManagerにすると理解しずらい


誤解されない名前
他の意味と間違えられないか考える
限界値を含めるときはmin,maxを使用する
範囲を指定するときはfirst　と　lastを使う
包含、排他的範囲には begin と　endを使う
readは動詞でも過去形でもあるため様々な解釈ができるためより具体的に記載する
コストの高い処理は相応の名前をつける
最善の名前は誤解されない名前、曖昧な単語を避ける


優れたコードは目に優しい
読み手が慣れているパターン、一貫性のあるレイアウト
関連するコードをまとめてブロックにする
インテンド、余白を上手く取り入れる
縦の線をまっすぐにする、整列させることで読みやすくなる
一貫性と意味のある並び順を　重要度、アルファベット順など
ブロックにまとめる、段落で分ける
正しさよりも一貫性のあるスタイルを


コメントするべきことを知る
コメントの目的は書き手の意図を読み手に知らせること
コードを書いている時の自分の考えを記録する
読み手の立場になって何が必要か考える

コメントするべきではないこと
コードでわかることは記載しない
コメントしなくてもわかる名前に変える
優れたコード> 酷いコード + 優れたコメント
酷いコードを認めて修正するべき内容や書いたときの考えを記載する
コードの欠陥をコメントにつける
TODO: 後で手をつける
FIXME: 不具合のあるコード
HACK: あまり綺麗じゃない解決策
XXX: 危険、大きな問題がある　など、チームに合わせて使用する

定数にコメントをつける
Let maxDoc = 1000 　// 合理的な限界値、人間はこんなに読めない
Image.quality = 0.72 // 0.72ならユーザーはファイルサイズと品質の面で妥協できる
頭の中で考えていることを記録することが大切

質問されそうなことを想像する
ハマりそうな罠を告知する
コードを見てびっくりすること、間違えて使う可能性を予測する

全体像のコメント
新しくチームに参加した人がいるとするとコードに慣れてもらう必要がある
ファイルや、クラスに対して要約したコメントを記載する
コメントにはWhatではなくWhyを書こうではなく、WhatでもHowでもWhyでも理解に役立つならなんでも書こう
頭の中にあるコメントを書き出す、改善が必要なものを見つける　
//注意: このコードはリストの重複を処理できません(実装が難しいため)

コメントするべきではないこと
コードから抽出できること
酷いコードを補う補助的コメント (コメントではなくコードを修正する)

記録すべき自分の考え
なぜコードがこの書き方なのか
コードの欠陥を知らせる
定数の値にまつわる背景

読み手の立場になって考える
コードを読んだ人が驚くと思うところを予想してコメント
ファイルやクラスには全体像のコメントを書く
コードブロックに概要をまとめる

コメントは領域に対する情報の比率を高くする
曖昧な代名詞を避けて明示する
単純で短く、直接的に
複数ものがあるときはそれ、これ等の代名詞を避ける
関数の動作は正確に説明する

　
第二部

条件やループなどの制御フローはできるだけ自然にする
条件式の左側が調査対象の式。変化する。　右側が比較対象の式。あまり変化しない。

if (a == b) {
 // 第1ケース
} else {
 // 第2ケース
}

if (a != b) {
 // 第2ケース
} else {
 // 第1ケース
}

条件は否定形よりも肯定形を使う。
単純な条件を先に書く。
関心を引く条件や目立つ条件を先に書く。

三項演算子は読みやすくなるパターンと理解に時間がかかる読みにくいパターンがある
行数を短くするよりも、他人が理解するのにかかる時間を短くする。

Do/whileループが変わっているのはコードブロックを再実行する条件が下にあること
Whileループにすればコードブロックを読む前に条件がわかるので読みやすくなる

関数から早く返す return文を使って早く返すこと
ネストを浅くする。変更するときは関心を引く部分を、コードを新鮮な目で見て一歩下がってみる
失敗するケースを早めに返してネストを削除する

ド・モルガンの法則
not(a or b or c) = (not a) and (not b) and (not c)
not(a and b and c) = (not a) or (not b) or (not c)

短絡評価の悪用
if(a || b)のaがtrueならbは評価されない。悪用すると複雑なロジックになることがある
頭がいいコードに気をつける。後で他人が読んでも分かりにくいことがある。
   
巨大な式を分割し、簡潔な名前で式を説明することでコードを文書化できる
複雑なロジックは積極的に分割する


変数
変数が多いと変数を追跡するのが難しくなる。減らして軽量にする
変数のスコープが大きいとスコープを把握する時間が長くなる
変数が頻繁に変更されると現在の値を把握するのが難しくなる。一度だけ書き込む変数を使う。
全ての変数のスコープを縮めるのは良い考え


第三部

プログラムの主目的と関係のない問題を抽出する
コードを再構築して一度に一つのことをやるようにする
コードを言葉で説明する。説明を元にして綺麗な解決策を作る

大きな問題を小さな問題に分割して、それぞれの解決策を組み立てること
無関係の下位問題を積極的に見つけて抽出すること

1、関数やコードブロックを見て「このコードの高レベルの目標は何か？」
2、コードの各行に対して「高レベルの目標に直接的に効果があるのか？」あるいは、「無関係の下位問題を解決しているか？」
3、無関係の下位問題を解決しているコードが相当量あれば、それらを抽出して別の関数にする

汎用コードはプロジェクトから切り離されていることで開発もテストも理解も楽になる
プロジェクト固有のコードから汎用コードを分離する
一般的な問題を解決するライブラリやヘルパー関数を作っていけばプログラムの核だけが残る

一度に複数のことを行うコードは理解しにくい
「関数は一度に1つのことを行うべき」ではなく本著では「一度に1つのタスクをする」を推奨している
コードが行なっているタスクを全て列挙し、できるだけ異なる関数に分割する。


1、コードの動作を簡単な言葉で同僚にもわかるように説明する
2、その説明の中で使っているキーワードやフレーズに注目する
3、その説明に合わせてコードを書く

プログラムを簡単な言葉で説明する技法は簡単だが非常に強力
問題を声に出して説明するだけで解決方法が見つかる「ラバーダッキング(ゴムのアヒル)」
問題や設計をうまく言葉で説明できないのであれば見落としているか詳細が明確になっていないということ
プログラム（あるいは自分の考え）を言葉にすることで明確な形となる


学ぶべき大切な技能はコードを書かない時を知ることなのかも
自分でかいたコードであれば全ての行をテストし、保守する必要がある
コードを小さく保つ。大きくなると把握するのもバグを見つけるのも大変
汎用的なユーティリティコードを作って重複コードを削除する
未使用のコードや無用の機能を削除する
プロジェクトをサブプロジェクトに分割する


身近なライブラリに親しむ
標準ライブラリの全ての関数、モジュール、型の名前を読んでみる
ライブラリを覚えるのではなく、触れておくことでいざ使用するとき思い出せる

必要な機能をプロダクトから削除する。過剰な機能は持たせない
最も簡単な問題を解決できるような要求を考える
定期的に全てのAPIを読んで標準ライブラリに慣れ親しんでおく


第四部
本物のコードより先にテストコードを書くテスト駆動開発といったテスト開発の哲学については触れない

テストコードとは「本物のコードの動作と使い方を示した非公式的な文書」だと考えるプログラマもいるほど
テストが読みやすけれは本物のコードの動作が理解しやすくなる
安心してテストの追加や変更ができるようにテストコードを読みやすくする

一般的な設計原則として「大切ではない詳細はユーザーから隠し、大切な詳細は目立つようにする」
最小のテストを作る。テストの本質を1行にまとめることもできる。簡潔にすることで読みやすくするだけでなく、簡単になる
エラーメッセージを読みやすくする。完全にテストする最も単純な入力値の組み合わせを選択しなければいけない。
テストには最も綺麗で単純な値を選ぶ。完璧な入力値を1つ作るのではなく、小さなテストを複数作る方が簡単で効果的で読みやすい。
テスト関数にいい名前を付けるにはます"Test_"という接頭辞をつけて情報をひとまとめにするとよい
プログラムをクラスやメソッドに分割するというのは疎結合にしたほうがテストしやすいから

小さいクラスは単純で理解しやすい
クラスや関数が1つのことをするとテストケースが少なくて済む
クラスが他のクラスに依存していないと、クラスを独立してテストできる。システムは並列に開発でき、クラスは他の部分を機にすることなく簡単に修正や削除ができる。

テストのため本物のコードの読みやすさを犠牲にしない
テストで100%カバレッジ(テスト網羅性)を目指さない。バグのコストが高くない部分やどうでもいいエラーケースが含まれている。
もし100%ならバグを見逃しているか、機能を実装していないか、仕様が変更されたことに気づいていない
バグのコストによってテストコードにかける最適な時間は変わる。
プロジェクトの一部に過ぎないテストがプロジェクト全体を支配している状況は時間を犠牲にしている

テストのトップレベルはできるだけ簡潔に
テストが失敗したらバグの発見や修正がしやすいようなエラーメッセージを表示
テストに有効な最も単純な入力値を使う
テスト関数に説明的な名前をつけて何をテストしているかを明らかにする


高品質なコードを書くための書籍
Code Complete -　完全なプログラミングを目指して スティーブマコネル著
リファクタリンング - プログラムの体質改善テクニック マーチンファウラー著
プログラミング作法 ブライアンカーニハンロブパイク著
達人プログラマー　- システム開発の職人から名匠への道 アンドリューハント著
Clean Code　ー　アジャイルソフトウェア達人の技　ロバートCマーティン著


読みやすいコードを書くには、、、
1 実際にやる　学んだことや、意識をしながらコードを書く
2 他の人に読んでもらう　フィードバックを受けてより読みやすいコードを目指す
3 読みやすいコードを書くことを当たり前にする
4 コードで伝える　書いたことを忘れたようなコードでも良いコードなら一目でわかる















