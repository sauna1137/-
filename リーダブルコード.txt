リーダブルコード

第一部

読みやすいコードとは
他の人が最短時間で理解できるようなコード
短くて理解に時間がかかるコードよりも長くても理解するまでにかかる時間が短いコードを


名前に情報を詰め込む
明確な単語を使用、汎用的な名前を避ける、具体的な名前を使用する
類語を調べてみる

GetではなくFetchやDownloadなど

ループイテレータ
i , j , kなど


値の単位や属性を追加する
delay -> delay_secs
limit -> max_range
password -> plainText_password
html -> html_utf8


名前の長さ
スコープが小さければ短い名前でも判断できる
省略形はString を　Strなら誰でもわかるがBackEndManagerをBEManagerにすると理解しずらい


誤解されない名前
他の意味と間違えられないか考える
限界値を含めるときはmin,maxを使用する
範囲を指定するときはfirst　と　lastを使う
包含、排他的範囲には begin と　endを使う
readは動詞でも過去形でもあるため様々な解釈ができるためより具体的に記載する
コストの高い処理は相応の名前をつける
最善の名前は誤解されない名前、曖昧な単語を避ける


優れたコードは目に優しい
読み手が慣れているパターン、一貫性のあるレイアウト
関連するコードをまとめてブロックにする
インテンド、余白を上手く取り入れる
縦の線をまっすぐにする、整列させることで読みやすくなる
一貫性と意味のある並び順を　重要度、アルファベット順など
ブロックにまとめる、段落で分ける
正しさよりも一貫性のあるスタイルを


コメントするべきことを知る
コメントの目的は書き手の意図を読み手に知らせること
コードを書いている時の自分の考えを記録する
読み手の立場になって何が必要か考える

コメントするべきではないこと
コードでわかることは記載しない
コメントしなくてもわかる名前に変える
優れたコード> 酷いコード + 優れたコメント
酷いコードを認めて修正するべき内容や書いたときの考えを記載する
コードの欠陥をコメントにつける
TODO: 後で手をつける
FIXME: 不具合のあるコード
HACK: あまり綺麗じゃない解決策
XXX: 危険、大きな問題がある　など、チームに合わせて使用する

定数にコメントをつける
Let maxDoc = 1000 　// 合理的な限界値、人間はこんなに読めない
Image.quality = 0.72 // 0.72ならユーザーはファイルサイズと品質の面で妥協できる
頭の中で考えていることを記録することが大切

質問されそうなことを想像する
ハマりそうな罠を告知する
コードを見てびっくりすること、間違えて使う可能性を予測する

全体像のコメント
新しくチームに参加した人がいるとするとコードに慣れてもらう必要がある
ファイルや、クラスに対して要約したコメントを記載する
コメントにはWhatではなくWhyを書こうではなく、WhatでもHowでもWhyでも理解に役立つならなんでも書こう
頭の中にあるコメントを書き出す、改善が必要なものを見つける　
//注意: このコードはリストの重複を処理できません(実装が難しいため)

コメントするべきではないこと
コードから抽出できること
酷いコードを補う補助的コメント (コメントではなくコードを修正する)

記録すべき自分の考え
なぜコードがこの書き方なのか
コードの欠陥を知らせる
定数の値にまつわる背景

読み手の立場になって考える
コードを読んだ人が驚くと思うところを予想してコメント
ファイルやクラスには全体像のコメントを書く
コードブロックに概要をまとめる

コメントは領域に対する情報の比率を高くする
曖昧な代名詞を避けて明示する
単純で短く、直接的に
複数ものがあるときはそれ、これ等の代名詞を避ける
関数の動作は正確に説明する

　
第二部

条件やループなどの制御フローはできるだけ自然にする
条件式の左側が調査対象の式。変化する。　右側が比較対象の式。あまり変化しない。

if (a == b) {
 // 第1ケース
} else {
 // 第2ケース
}

if (a != b) {
 // 第2ケース
} else {
 // 第1ケース
}

条件は否定形よりも肯定形を使う。
単純な条件を先に書く。
関心を引く条件や目立つ条件を先に書く。

三項演算子は読みやすくなるパターンと理解に時間がかかる読みにくいパターンがある
行数を短くするよりも、他人が理解するのにかかる時間を短くする。

Do/whileループが変わっているのはコードブロックを再実行する条件が下にあること
Whileループにすればコードブロックを読む前に条件がわかるので読みやすくなる

関数から早く返す return文を使って早く返すこと
ネストを浅くする。変更するときは関心を引く部分を、コードを新鮮な目で見て一歩下がってみる
失敗するケースを早めに返してネストを削除する

ド・モルガンの法則
not(a or b or c) = (not a) and (not b) and (not c)
not(a and b and c) = (not a) or (not b) or (not c)

短絡評価の悪用
if(a || b)のaがtrueならbは評価されない。悪用すると複雑なロジックになることがある
頭がいいコードに気をつける。後で他人が読んでも分かりにくいことがある。
   










